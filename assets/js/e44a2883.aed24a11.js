"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4736],{4577:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var s=i(4848),t=i(8453);const a={sidebar_position:2},o="Models in Ruby",l={id:"tutorial-extras/translate-your-site",title:"Models in Ruby",description:"Creating models in Ruby on Rails is essential as they form the core of your application's business logic. Models in Rails use ActiveRecord, an Object-Relational Mapping (ORM) system, allowing models to interact with the database in an object-oriented manner. Here, we'll discuss writing models by exploring the example of an Officer model, covering key concepts and functionality.",source:"@site/docs/tutorial-extras/translate-your-site.md",sourceDirName:"tutorial-extras",slug:"/tutorial-extras/translate-your-site",permalink:"/272_help/docs/tutorial-extras/translate-your-site",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Database Operations",permalink:"/272_help/docs/tutorial-extras/manage-docs-versions"},next:{title:"Views in Ruby",permalink:"/272_help/docs/tutorial-extras/views-in-ruby"}},r={},c=[{value:"Important Components of a Model",id:"important-components-of-a-model",level:2},{value:"Basic Setup",id:"basic-setup",level:3},{value:"Association",id:"association",level:3},{value:"Validations",id:"validations",level:3},{value:"Difference between Validate and Validates",id:"difference-between-validate-and-validates",level:4},{value:"Scopes",id:"scopes",level:3},{value:"Callbacks",id:"callbacks",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"models-in-ruby",children:"Models in Ruby"}),"\n",(0,s.jsxs)(n.p,{children:["Creating models in Ruby on Rails is essential as they form the core of your application's business logic. Models in Rails use ActiveRecord, an Object-Relational Mapping (ORM) system, allowing models to interact with the database in an object-oriented manner. Here, we'll discuss writing models by exploring the example of an ",(0,s.jsx)(n.strong,{children:"Officer"})," model, covering key concepts and functionality."]}),"\n",(0,s.jsx)(n.h2,{id:"important-components-of-a-model",children:"Important Components of a Model"}),"\n",(0,s.jsx)(n.p,{children:"Below is a list of important components in a model:"}),"\n",(0,s.jsx)(n.h3,{id:"basic-setup",children:"Basic Setup"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"class Officer < ApplicationRecord\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Inheritance from ",(0,s.jsx)(n.strong,{children:"ApplicationRecord"}),": In Rails, models inherit from ",(0,s.jsx)(n.strong,{children:"ApplicationRecord"})," which in turn inherits from ",(0,s.jsx)(n.strong,{children:"ActiveRecord::Base"}),", linking the model to Rails' ORM."]}),"\n",(0,s.jsx)(n.h3,{id:"association",children:"Association"}),"\n",(0,s.jsx)(n.p,{children:"Defining Relationships:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"belongs_to"})," indicates a one-to-one connection with another model, which in this case is unit."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"has_many"})," signifies a one-to-many relationship with other models like assignments and investigation_notes."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["has_many ",":through"]})," defines a many-to-many relationship through another model."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"In the example of our officer model, we may have the following associations:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"belongs_to :unit\nhas_many :assignments\nhas_many :investigations, through: :assignments\nhas_many :investigation_notes\n"})}),"\n",(0,s.jsx)(n.h3,{id:"validations",children:"Validations"}),"\n",(0,s.jsx)(n.p,{children:"Validations are crucial to ensure that only valid data is saved to the database."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"validates_presence_of"})," ensures specific fields are not empty."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"validates_format_of"})," checks the data against a specific format using regular expressions."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"validates_uniqueness_of"})," ensures that a value is unique across a table.\nCustom validations can also be added, as seen with the validate lambda for is_active_in_system."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"validates_presence_of :first_name, :last_name, :unit_id, :role\nvalidates_uniqueness_of :ssn\n"})}),"\n",(0,s.jsx)(n.h4,{id:"difference-between-validate-and-validates",children:"Difference between Validate and Validates"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"validates"})," method is used to apply built-in validation helpers to one or more model attributes. It allows you to specify various constraints on data such as presence, length, format, and uniqueness among others. This method is typically used for quick and straightforward validations that involve no custom logic."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"validate"})," method is used when you need to implement custom validation methods. This is useful when the built-in validation helpers do not meet your requirements, and you need more control over the validation process. It allows you to write a method that defines specific conditions that must be met."]}),"\n",(0,s.jsx)(n.h3,{id:"scopes",children:"Scopes"}),"\n",(0,s.jsx)(n.p,{children:"Scopes allow you to define reusable query clauses that can be applied to models. They're especially useful for encapsulating query logic, making your code easier to read and maintain. Scopes are defined within the model file and can return ActiveRecord relations, which means they can be chained with other scopes or query methods."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"scope :alphabetical, -> { order('last_name, first_name') }\nscope :for_unit, -> (unit_id){ where(unit_id: unit_id) }\n"})}),"\n",(0,s.jsx)(n.h3,{id:"callbacks",children:"Callbacks"}),"\n",(0,s.jsx)(n.p,{children:"Callbacks are methods that get triggered automatically at certain points in the lifecycle of an Active Record object. These lifecycle moments can include creation, updating, saving, destroying, validation, and more."}),"\n",(0,s.jsx)(n.p,{children:"To define a callback, you specify the callback method within the model. Here is an example using some of the callbacks:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"before_save :normalize_name, :check_active_status\nafter_create :send_welcome_email\n\nprivate\n  def normalize_name\n    self.name = name.downcase.titleize\n  end\n\n  def check_active_status\n    self.active = true unless active?\n  end\n\n  def send_welcome_email\n    EmailService.send_welcome_email(self)\n  end\nend\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var s=i(6540);const t={},a=s.createContext(t);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);