"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[474],{8786:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>o,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var a=n(4848),t=n(8453);const s={sidebar_position:3},r="Views in Ruby",l={id:"tutorial-extras/views-in-ruby",title:"Views in Ruby",description:"Views in Ruby on Rails are typically built using HTML and embedded Ruby (ERB) code. They are responsible for displaying the data passed by the controllers to the users. Views are located in the app/views folder, and are organized based on the controller they are associated with.",source:"@site/docs/tutorial-extras/views-in-ruby.md",sourceDirName:"tutorial-extras",slug:"/tutorial-extras/views-in-ruby",permalink:"/272_help/docs/tutorial-extras/views-in-ruby",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Models in Ruby",permalink:"/272_help/docs/tutorial-extras/translate-your-site"},next:{title:"Testing",permalink:"/272_help/docs/tutorial-extras/controller-in-ruby"}},o={},d=[{value:"Example of a simple view in Ruby.",id:"example-of-a-simple-view-in-ruby",level:3},{value:"Introduction to Partials.",id:"introduction-to-partials",level:2},{value:"Example of a partial in Ruby.",id:"example-of-a-partial-in-ruby",level:3},{value:"Using a partial in a view.",id:"using-a-partial-in-a-view",level:3},{value:"Relationships between views and partials.",id:"relationships-between-views-and-partials",level:2},{value:"Benefits of using partials.",id:"benefits-of-using-partials",level:3},{value:"Best Practices",id:"best-practices",level:2}];function c(e){const i={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.h1,{id:"views-in-ruby",children:"Views in Ruby"}),"\n",(0,a.jsx)(i.p,{children:"Views in Ruby on Rails are typically built using HTML and embedded Ruby (ERB) code. They are responsible for displaying the data passed by the controllers to the users. Views are located in the app/views folder, and are organized based on the controller they are associated with."}),"\n",(0,a.jsx)(i.h3,{id:"example-of-a-simple-view-in-ruby",children:"Example of a simple view in Ruby."}),"\n",(0,a.jsx)(i.p,{children:"Here is how you might display a list of officers in the officers/index.html.erb file:"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-jsx",children:"<h1>Officers List</h1>\n<ul>\n  <% @officers.each do |officer| %>\n    <li><%= officer.full_name %> - <%= officer.unit.name %></li>\n  <% end %>\n</ul>\n"})}),"\n",(0,a.jsx)(i.p,{children:"This view uses ERB to iterate over an @officers instance variable, which is typically set in the corresponding controller, and displays each officer's name and unit."}),"\n",(0,a.jsx)(i.h2,{id:"introduction-to-partials",children:"Introduction to Partials."}),"\n",(0,a.jsx)(i.p,{children:"Partials are small, reusable code snippets that can be included in other views. They help reduce duplication and keep views organized. Partials are prefixed with an underscore (_) to differentiate them from regular views."}),"\n",(0,a.jsx)(i.h3,{id:"example-of-a-partial-in-ruby",children:"Example of a partial in Ruby."}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-jsx",children:'# app/views/shared/_navbar.html.erb\n<nav>\n  <ul>\n    <li><a href="/home">Home</a></li>\n    <li><a href="/officers">Officers</a></li>\n    <li><a href="/units">Units</a></li>\n  </ul>\n</nav>\n'})}),"\n",(0,a.jsx)(i.h3,{id:"using-a-partial-in-a-view",children:"Using a partial in a view."}),"\n",(0,a.jsx)(i.p,{children:"To use a partial, you use the render method within a view:"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-jsx",children:"<%= render 'shared/navbar' %>\n"})}),"\n",(0,a.jsx)(i.p,{children:"This line will include the content of the _navbar.html.erb partial into the view where it's called."}),"\n",(0,a.jsx)(i.h2,{id:"relationships-between-views-and-partials",children:"Relationships between views and partials."}),"\n",(0,a.jsx)(i.p,{children:"Partials and views are closely related. While views can function independently, partials are meant to be embedded within views. This relationship helps in managing complex user interfaces by breaking them down into manageable and reusable components."}),"\n",(0,a.jsx)(i.h3,{id:"benefits-of-using-partials",children:"Benefits of using partials."}),"\n",(0,a.jsxs)("ol",{children:[(0,a.jsx)("li",{children:"DRY Principle: Don't Repeat Yourself. Partials help avoid code duplication."}),(0,a.jsx)("li",{children:"Ease of Maintenance: Updating a single partial updates all instances where the partial is used."}),(0,a.jsx)("li",{children:"Enhanced Readability: Smaller, specific files are easier to read and understand than one large view file."})]}),"\n",(0,a.jsx)(i.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsx)(i.p,{children:"When using views and partials, it\u2019s important to keep them focused on presentation. Heavy logic should be placed in helpers or controllers, not directly in the view or partial, to maintain clean code and separation of concerns."}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-jsx",children:"# Good example: Using a helper method to format time\n<%= time_tag(officer.created_at, format: :short) %>\n\n# Bad example: Complex logic in view\n<% if officer.created_at > Time.now - 1.day %>\n  <span>New!</span>\n<% end %>\n"})}),"\n",(0,a.jsx)(i.p,{children:"In summary, views generate the pages that users interact with, while partials allow you to reuse template segments across different views. Understanding how to effectively use these tools will significantly improve the organization and maintenance of your Rails applications."})]})}function p(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>r,x:()=>l});var a=n(6540);const t={},s=a.createContext(t);function r(e){const i=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),a.createElement(s.Provider,{value:i},e.children)}}}]);