"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7396],{3028:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var t=r(4848),s=r(8453);const i={sidebar_position:3},d="CRUD Operations",o={id:"Key-Concepts/create-a-blog-post",title:"CRUD Operations",description:"CRUD refers to the four basic operations a software application should be able to perform \u2013 Create, Read, Update, and Delete.",source:"@site/docs/Key-Concepts/create-a-blog-post.md",sourceDirName:"Key-Concepts",slug:"/Key-Concepts/create-a-blog-post",permalink:"/272_help/docs/Key-Concepts/create-a-blog-post",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"MVC in Ruby on Rails",permalink:"/272_help/docs/Key-Concepts/create-a-document"},next:{title:"Ruby Gems",permalink:"/272_help/docs/Key-Concepts/deploy-your-site"}},a={},l=[{value:"CRUD Operations Overview",id:"crud-operations-overview",level:2},{value:"CRUD in Ruby on Rails",id:"crud-in-ruby-on-rails",level:2},{value:"<strong>Create (C)</strong>",id:"create-c",level:3},{value:"<strong>Read (R)</strong>",id:"read-r",level:3},{value:"<strong>Update (U)</strong>",id:"update-u",level:3},{value:"<strong>Delete (D)</strong>",id:"delete-d",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"crud-operations",children:"CRUD Operations"}),"\n",(0,t.jsxs)(n.p,{children:["CRUD refers to the four basic operations a software application should be able to perform \u2013 ",(0,t.jsx)(n.strong,{children:"Create"}),", ",(0,t.jsx)(n.strong,{children:"Read"}),", ",(0,t.jsx)(n.strong,{children:"Update"}),", and ",(0,t.jsx)(n.strong,{children:"Delete"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"crud-operations-overview",children:"CRUD Operations Overview"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Create"}),": Adding new records to the database."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Read"}),": Retrieving existing records."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Update"}),": Modifying the details of existing records."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Delete"}),": Removing records from the database."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Recall in SQL, we have learned similar operations. Below is a handy table for all the CRUD operations you would need in the context of 272."}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"CRUD Operation"}),(0,t.jsx)(n.th,{children:"SQL Clause"}),(0,t.jsx)(n.th,{children:"HTTP Verb"}),(0,t.jsx)(n.th,{children:"Controller Action"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Create"})}),(0,t.jsx)(n.td,{children:"INSERT"}),(0,t.jsx)(n.td,{children:"POST"}),(0,t.jsx)(n.td,{children:"create"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Read"})}),(0,t.jsx)(n.td,{children:"SELECT"}),(0,t.jsx)(n.td,{children:"GET"}),(0,t.jsx)(n.td,{children:"index/show/new/edit"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Update"})}),(0,t.jsx)(n.td,{children:"UPDATE"}),(0,t.jsx)(n.td,{children:"PATCH"}),(0,t.jsx)(n.td,{children:"update"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Delete"})}),(0,t.jsx)(n.td,{children:"DELETE"}),(0,t.jsx)(n.td,{children:"DELETE"}),(0,t.jsx)(n.td,{children:"destroy"})]})]})]}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.h2,{id:"crud-in-ruby-on-rails",children:"CRUD in Ruby on Rails"}),"\n",(0,t.jsx)(n.p,{children:"Rails provides a streamlined approach to performing CRUD operations through\nits Active Record ORM and scaffold generators. Below shows an example usage for each operation inside the model controller."}),"\n",(0,t.jsx)(n.h3,{id:"create-c",children:(0,t.jsx)(n.strong,{children:"Create (C)"})}),"\n",(0,t.jsx)(n.p,{children:"Handles the form submission, attempting to save a new Crime record to the database."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def create\n  @crime = Crime.new(crime_params)\n  if @crime.save\n    flash[:notice] = "Successfully added #{@crime.name} to GCPD."\n    redirect_to crimes_path\n  else\n    render :new\n  end\nend\n'})}),"\n",(0,t.jsx)(n.h3,{id:"read-r",children:(0,t.jsx)(n.strong,{children:"Read (R)"})}),"\n",(0,t.jsx)(n.p,{children:"Reading involves fetching records from the database. You can retrieve a single record, multiple records, or all records"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def index\n  @active_crimes = Crime.active.alphabetical\n  @inactive_crimes = Crime.inactive.alphabetical\nend\n"})}),"\n",(0,t.jsx)(n.h3,{id:"update-u",children:(0,t.jsx)(n.strong,{children:"Update (U)"})}),"\n",(0,t.jsx)(n.p,{children:"Updating a record involves modifying its attributes and saving those changes:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def update\n  if @crime.update(crime_params)\n    flash[:notice] = "Successfully updated the crime."\n    redirect_to crimes_path\n  else\n    render :edit\n  end\nend\n'})}),"\n",(0,t.jsx)(n.h3,{id:"delete-d",children:(0,t.jsx)(n.strong,{children:"Delete (D)"})}),"\n",(0,t.jsx)(n.p,{children:"Deleting a record removes it from the database:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def destroy\n  if @crime.destroy\n    flash[:notice] = "Successfully removed the crime from the system."\n    redirect_to crimes_path\n  else\n    flash[:alert] = "Failed to remove the crime."\n    redirect_to crimes_path\n  end\nend\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>d,x:()=>o});var t=r(6540);const s={},i=t.createContext(s);function d(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);